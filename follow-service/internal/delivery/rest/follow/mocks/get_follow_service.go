// Code generated by MockGen. DO NOT EDIT.
// Source: follow-service/internal/delivery/rest/follow (interfaces: GetFollowService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/get_follow_service.go -package=mocks follow-service/internal/delivery/rest/follow GetFollowService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetFollowService is a mock of GetFollowService interface.
type MockGetFollowService struct {
	ctrl     *gomock.Controller
	recorder *MockGetFollowServiceMockRecorder
	isgomock struct{}
}

// MockGetFollowServiceMockRecorder is the mock recorder for MockGetFollowService.
type MockGetFollowServiceMockRecorder struct {
	mock *MockGetFollowService
}

// NewMockGetFollowService creates a new mock instance.
func NewMockGetFollowService(ctrl *gomock.Controller) *MockGetFollowService {
	mock := &MockGetFollowService{ctrl: ctrl}
	mock.recorder = &MockGetFollowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetFollowService) EXPECT() *MockGetFollowServiceMockRecorder {
	return m.recorder
}

// GetFollowing mocks base method.
func (m *MockGetFollowService) GetFollowing(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowing", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowing indicates an expected call of GetFollowing.
func (mr *MockGetFollowServiceMockRecorder) GetFollowing(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowing", reflect.TypeOf((*MockGetFollowService)(nil).GetFollowing), ctx, userID)
}
