// Code generated by MockGen. DO NOT EDIT.
// Source: post-service/internal/delivery/rest/post (interfaces: GetPostService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/get_service.go -package=mocks post-service/internal/delivery/rest/post GetPostService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	post "post-service/internal/domain/post"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetPostService is a mock of GetPostService interface.
type MockGetPostService struct {
	ctrl     *gomock.Controller
	recorder *MockGetPostServiceMockRecorder
	isgomock struct{}
}

// MockGetPostServiceMockRecorder is the mock recorder for MockGetPostService.
type MockGetPostServiceMockRecorder struct {
	mock *MockGetPostService
}

// NewMockGetPostService creates a new mock instance.
func NewMockGetPostService(ctrl *gomock.Controller) *MockGetPostService {
	mock := &MockGetPostService{ctrl: ctrl}
	mock.recorder = &MockGetPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPostService) EXPECT() *MockGetPostServiceMockRecorder {
	return m.recorder
}

// GetPostsByUsers mocks base method.
func (m *MockGetPostService) GetPostsByUsers(ctx context.Context, userIDs []string) ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUsers", ctx, userIDs)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUsers indicates an expected call of GetPostsByUsers.
func (mr *MockGetPostServiceMockRecorder) GetPostsByUsers(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUsers", reflect.TypeOf((*MockGetPostService)(nil).GetPostsByUsers), ctx, userIDs)
}
