// Code generated by MockGen. DO NOT EDIT.
// Source: user-service/internal/delivery/rest/users (interfaces: UserGetService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/get_service.go -package=mocks user-service/internal/delivery/rest/users UserGetService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	users "user-service/internal/domain/users"

	gomock "go.uber.org/mock/gomock"
)

// MockUserGetService is a mock of UserGetService interface.
type MockUserGetService struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetServiceMockRecorder
	isgomock struct{}
}

// MockUserGetServiceMockRecorder is the mock recorder for MockUserGetService.
type MockUserGetServiceMockRecorder struct {
	mock *MockUserGetService
}

// NewMockUserGetService creates a new mock instance.
func NewMockUserGetService(ctrl *gomock.Controller) *MockUserGetService {
	mock := &MockUserGetService{ctrl: ctrl}
	mock.recorder = &MockUserGetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetService) EXPECT() *MockUserGetServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUserGetService) GetByID(ctx context.Context, id string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserGetServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserGetService)(nil).GetByID), ctx, id)
}
