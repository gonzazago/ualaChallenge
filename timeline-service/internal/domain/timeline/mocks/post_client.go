// Code generated by MockGen. DO NOT EDIT.
// Source: timeline-service/internal/domain/timeline (interfaces: PostClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/post_client.go -package=mocks timeline-service/internal/domain/timeline PostClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	timeline "timeline-service/internal/domain/timeline"

	gomock "go.uber.org/mock/gomock"
)

// MockPostClient is a mock of PostClient interface.
type MockPostClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostClientMockRecorder
	isgomock struct{}
}

// MockPostClientMockRecorder is the mock recorder for MockPostClient.
type MockPostClientMockRecorder struct {
	mock *MockPostClient
}

// NewMockPostClient creates a new mock instance.
func NewMockPostClient(ctrl *gomock.Controller) *MockPostClient {
	mock := &MockPostClient{ctrl: ctrl}
	mock.recorder = &MockPostClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostClient) EXPECT() *MockPostClientMockRecorder {
	return m.recorder
}

// GetPostsByUsers mocks base method.
func (m *MockPostClient) GetPostsByUsers(ctx context.Context, userIDs []string) ([]timeline.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUsers", ctx, userIDs)
	ret0, _ := ret[0].([]timeline.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUsers indicates an expected call of GetPostsByUsers.
func (mr *MockPostClientMockRecorder) GetPostsByUsers(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUsers", reflect.TypeOf((*MockPostClient)(nil).GetPostsByUsers), ctx, userIDs)
}
