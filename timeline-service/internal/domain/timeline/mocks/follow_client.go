// Code generated by MockGen. DO NOT EDIT.
// Source: timeline-service/internal/domain/timeline (interfaces: FollowClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/follow_client.go -package=mocks timeline-service/internal/domain/timeline FollowClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	follow "timeline-service/internal/infra/client/follow"

	gomock "go.uber.org/mock/gomock"
)

// MockFollowClient is a mock of FollowClient interface.
type MockFollowClient struct {
	ctrl     *gomock.Controller
	recorder *MockFollowClientMockRecorder
	isgomock struct{}
}

// MockFollowClientMockRecorder is the mock recorder for MockFollowClient.
type MockFollowClientMockRecorder struct {
	mock *MockFollowClient
}

// NewMockFollowClient creates a new mock instance.
func NewMockFollowClient(ctrl *gomock.Controller) *MockFollowClient {
	mock := &MockFollowClient{ctrl: ctrl}
	mock.recorder = &MockFollowClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowClient) EXPECT() *MockFollowClientMockRecorder {
	return m.recorder
}

// GetFollowing mocks base method.
func (m *MockFollowClient) GetFollowing(ctx context.Context, userID string) (*follow.Followers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowing", ctx, userID)
	ret0, _ := ret[0].(*follow.Followers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowing indicates an expected call of GetFollowing.
func (mr *MockFollowClientMockRecorder) GetFollowing(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowing", reflect.TypeOf((*MockFollowClient)(nil).GetFollowing), ctx, userID)
}
